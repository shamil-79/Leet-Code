Given a binary array nums, return the maximum length of a contiguous subarray with an equal number of 0 and 1.

 

Example 1:

Input: nums = [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0 and 1.
Example 2:

Input: nums = [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.
 

Constraints:

1 <= nums.length <= 105
nums[i] is either 0 or 1.









//////////////////////------------------------------///////////////////////////





solutin:



public class Solution {
    public int FindMaxLength(int[] nums) {
        Dictionary<int, int> sumIndexMap = new Dictionary<int, int>();
        int maxLen = 0;
        int sum = 0;
        sumIndexMap[0] = -1;

        for (int i = 0; i < nums.Length; i++) {
            sum += nums[i] == 1 ? 1 : -1;
            if (sumIndexMap.ContainsKey(sum)) {
                maxLen = Math.Max(maxLen, i - sumIndexMap[sum]);
            }
            else {
                sumIndexMap[sum] = i;
            }
        }

        return maxLen;
    }
}
