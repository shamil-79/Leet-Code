Given an integer array nums of unique elements, return all possible 
subsets
 (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
 

Constraints:

1 <= nums.length <= 10
-10 <= nums[i] <= 10
All the numbers of nums are unique.



//////////////////////////////////////////


public class Solution {
    public IList<IList<int>> Subsets(int[] nums) {
        IList<IList<int>> result = new List<IList<int>>();
        List<int> subset = new List<int>();
        Backtrack(nums, 0, subset, result);
        return result;
    }
    
    private void Backtrack(int[] nums, int start, List<int> subset, IList<IList<int>> result) {
        result.Add(new List<int>(subset));
        
        for (int i = start; i < nums.Length; i++) {
            subset.Add(nums[i]);
            Backtrack(nums, i + 1, subset, result); 
            subset.RemoveAt(subset.Count - 1);
        }
    }
}
