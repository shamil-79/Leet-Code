Given a string s of '(' , ')' and lowercase English characters.

Your task is to remove the minimum number of parentheses ( '(' or ')', in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:

It is the empty string, contains only lowercase characters, or
It can be written as AB (A concatenated with B), where A and B are valid strings, or
It can be written as (A), where A is a valid string.
 

Example 1:

Input: s = "lee(t(c)o)de)"
Output: "lee(t(c)o)de"
Explanation: "lee(t(co)de)" , "lee(t(c)ode)" would also be accepted.
Example 2:

Input: s = "a)b(c)d"
Output: "ab(c)d"
Example 3:

Input: s = "))(("
Output: ""
Explanation: An empty string is also valid.
 

Constraints:

1 <= s.length <= 105
s[i] is either'(' , ')', or lowercase English letter.








////////////////////////////////////////////////





solution :





public class Solution {
    public string MinRemoveToMakeValid(string s) {
        Stack<int> stack = new Stack<int>();
        
        HashSet<int> toRemove = new HashSet<int>();
        
        for (int i = 0; i < s.Length; i++) {
            if (s[i] == '(') {
                stack.Push(i);
            } else if (s[i] == ')') {
                if (stack.Count > 0) {
                    stack.Pop();
                } else {
                    toRemove.Add(i);
                }
            }
        }
        
        while (stack.Count > 0) {
            toRemove.Add(stack.Pop());
        }
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < s.Length; i++) {
            if (!toRemove.Contains(i)) {
                result.Append(s[i]);
            }
        }
        
        return result.ToString();
    }
}
